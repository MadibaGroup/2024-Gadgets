<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Handbook</title><link>http://plonkbook.org/docs/background/</link><description>Recent content on Handbook</description><generator>Hugo</generator><language>en-us</language><atom:link href="http://plonkbook.org/docs/background/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>http://plonkbook.org/docs/background/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://plonkbook.org/docs/background/overview/</guid><description>Overview # Preliminaries # While we may add more background in future iterations, for now we punt on explaining the following concepts and assume you are already familiar with them:
Elliptic curve cryptography Hardness of the discrete logarithm problem and related problems Pairing-based cryptography at a &amp;ldquo;black-box&amp;rdquo; level (what it does, not necessarily how it works) Resources: Lecture (Boneh) Commitment schemes Properties: hiding and binding Construction: Pedersen Commitments Resources: Lecture (Boneh) Zero knowledge proofs (high level idea) Properities: completeness, soundness, zero-knowledge Resources: Lecture (Goldwasser) zk-SNARKs # Plonk is a zk-SNARK proof system.</description></item><item><title>PCS</title><link>http://plonkbook.org/docs/background/kzg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://plonkbook.org/docs/background/kzg/</guid><description>Polynomial Commitment Schemes (PCS) # Comparing Polynomials # Say that Carol sends a polynomial to Alice and the same polynomial to Bob. Later Alice and Bob are sitting together and want to make sure their polynomials, which they got from Carol, are actually the same. How do you compare polynomials? There are many sufficient comparisons, but here are two ways to get started:
Ensure the degree $d$ is the same and each coefficient is the same, Ensure the degree $d$ is the same and check at $d+1$ points.</description></item><item><title>Polynomials</title><link>http://plonkbook.org/docs/background/poly-iop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://plonkbook.org/docs/background/poly-iop/</guid><description>Encoding Arrays of Data into Polynomials # In the Poly-IOP model, data starts as an array (or vector) of integers and gadgets are defined in terms of operations on arrays. In the proof stage, the arrays are encoded into a polynomial. Array slots contain integers between 0 and $q-1$, where $q$ is a large (generally 256 bit) prime number. Recall that we call this set of integers $\mathbb{Z}_q$.
$\mathsf{data}_0$ $\mathsf{data}_1$ $\mathsf{data}_2$ $\mathsf{data}_3$ $\mathsf{data}_4$ It is common to denote a polynomial like $P(X)$ where $X$ is the variable of the polynomial.</description></item><item><title>Proofs</title><link>http://plonkbook.org/docs/background/proofs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://plonkbook.org/docs/background/proofs/</guid><description>Security Proofs # To be added.
Definitions # Definition 1 (Polynomial Commitment Scheme). A polynomial commitment scheme (PCS) is an interactive proof system that enables $\mathcal{P}$ to convince $\mathcal{V}$ that he knows a polynomial, without revealing the polynomial directly. $\mathcal{P}$ and $\mathcal{V}$ run the protocol in three moves: gen, com, and open. [Plonk]
Definition 2 (Polynomial IOP). Let $\mathcal{R}$ be a set of the relations among polynomials $\{P_i\}$. Let $\mathcal{C}_f$ is the commitment to $f$.</description></item><item><title>Red Tape</title><link>http://plonkbook.org/docs/background/red-tape/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://plonkbook.org/docs/background/red-tape/</guid><description>Red Tape # Generally speaking, the gadgets are quite flexible and work well as defined. However there are some subtle issues to pay attention to when using them.
Max array size # Arrays can be very large but encoding points into a multiplicative domain (using roots of unity) means a root of unity must exist that is the same or larger than the array size. A domain of size $\kappa$ exists only if $\kappa$ divides $q-1$, where $q$ is the modulus that applies to exponents in the elliptic curve.</description></item></channel></rss>